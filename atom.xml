<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ellis</title>
  
  <subtitle>一个萌萌哒小码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ellisl.club/"/>
  <updated>2018-05-16T10:27:42.286Z</updated>
  <id>http://ellisl.club/</id>
  
  <author>
    <name>E l l i s</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC入门篇(2)</title>
    <link href="http://ellisl.club//posts/56977/"/>
    <id>http://ellisl.club//posts/56977/</id>
    <published>2018-05-16T09:13:18.622Z</published>
    <updated>2018-05-16T10:27:42.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC入门篇-二"><a href="#SpringMVC入门篇-二" class="headerlink" title="SpringMVC入门篇(二)"></a>SpringMVC入门篇(二)</h2><h3 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h3><h4 id="默认支持的参数类型"><a href="#默认支持的参数类型" class="headerlink" title="默认支持的参数类型"></a>默认支持的参数类型</h4><p>处理器形参中添加如下类型的参数处理适配器会默认识别并进行赋值。</p><p>HttpServletRequest</p><pre><code>通过request对象获取请求信息</code></pre><a id="more"></a><p>HttpServletResponse</p><pre><code>通过response处理响应信息</code></pre><p>HttpSession</p><pre><code>通过session对象得到session中存放的对象</code></pre><p>Model/ModelMap</p><pre><code>除了ModelAndView以外，还可以使用Model来向页面传递数据，Model是一个接口，在参数里直接声明model即可</code></pre><h4 id="绑定简单类型"><a href="#绑定简单类型" class="headerlink" title="绑定简单类型"></a>绑定简单类型</h4><p>当请求的参数名称和处理器形参名称一致时会将请求参数与形参进行绑定。<br>这样，从Request取参数的方法就可以进一步简化</p><p>举例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemEdit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItemById</span><span class="params">(<span class="keyword">int</span> id, ModelMap model)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 根据id查询商品数据</span></span><br><span class="line">Item item = <span class="keyword">this</span>.itemService.queryItemById(id);</span><br><span class="line"><span class="comment">// 把商品数据放在模型中</span></span><br><span class="line">model.addAttribute(<span class="string">"item"</span>, item);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"itemEdit"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>支持的数据类型</p><p>参数类型推荐使用<strong>包装数据类型</strong>，因为基础数据类型不可以为null</p><p><strong>@RequestParam</strong></p><p>使用@RequestParam常用于处理简单类型的绑定</p><p><strong>value</strong>:参数名字，即入参的请求参数名字，如value=“itemId”表示请求的参数, 区中的名字为itemId的参数的值将传入</p><p><strong>required</strong>:是否必须，默认是true，表示请求中一定要有相应的参数，否则将报错</p><p><strong>defaultValue</strong>:默认值，表示如果请求中没有同名参数时的默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItemById</span><span class="params">(@RequestParam(value = <span class="string">"itemId"</span>, required = <span class="keyword">true</span>, defaultValue = <span class="string">"1"</span>)</span> Integer id,ModelMap modelMap) </span>&#123;</span><br><span class="line"><span class="comment">// 根据id查询商品数据</span></span><br><span class="line">Item item = <span class="keyword">this</span>.itemService.queryItemById(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把商品数据放在模型中</span></span><br><span class="line">modelMap.addAttribute(<span class="string">"item"</span>, item);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"itemEdit"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定pojo类型"><a href="#绑定pojo类型" class="headerlink" title="绑定pojo类型"></a>绑定pojo类型</h3><p>如果提交的参数很多，或者提交的表单中的内容很多的时候,可以使用简单类型接受数据,也可以使用pojo接收数据</p><p><strong>要求</strong>：pojo对象中的属性名和表单中input的name属性一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateItem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateItem</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用服务更新商品</span></span><br><span class="line"><span class="keyword">this</span>.itemService.updateItemById(item);</span><br><span class="line"><span class="comment">// 返回逻辑视图</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定包装pojo"><a href="#绑定包装pojo" class="headerlink" title="绑定包装pojo"></a>绑定包装pojo</h3><p>包装pojo的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Item item;</span><br><span class="line">set/get。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定包装pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定包装数据类型</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryItem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItem</span><span class="params">(QueryVo queryVo)</span> </span>&#123;</span><br><span class="line">System.out.println(queryVo.getItem().getId());</span><br><span class="line">System.out.println(queryVo.getItem().getName());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义参数绑定"><a href="#自定义参数绑定" class="headerlink" title="自定义参数绑定"></a>自定义参数绑定</h2><p>由于日期数据有很多种格式，springmvc没办法把字符串转换成日期类型。所以需要自定义参数绑定。</p><p>前端控制器接收到请求后，找到注解形式的处理器适配器，对RequestMapping标记的方法进行适配，并对方法中的形参进行参数绑定。可以在springmvc处理器适配器上自定义转换器Converter进行参数绑定。</p><h3 id="自定义Converter"><a href="#自定义Converter" class="headerlink" title="自定义Converter"></a>自定义Converter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Converter&lt;S, T&gt;</span></span><br><span class="line"><span class="comment">//S:source,需要转换的源的类型</span></span><br><span class="line"><span class="comment">//T:target,需要转换的目标类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 把字符串转换为日期类型</span></span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">Date date = simpleDateFormat.parse(source);</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果转换异常则返回空</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置Converter"><a href="#配置Converter" class="headerlink" title="配置Converter"></a>配置Converter</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 转换器配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">" club.ellisl.ssm.converter.DateConverter"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="高级参数绑定"><a href="#高级参数绑定" class="headerlink" title="高级参数绑定"></a>高级参数绑定</h2><h3 id="绑定数组"><a href="#绑定数组" class="headerlink" title="绑定数组"></a>绑定数组</h3><blockquote><p>需求: 在商品列表页面选中多个商品，然后删除。</p></blockquote><p>Controller方法中可以用String[]接收，或者pojo的String[]属性接收。两种方式任选其一即可。</p><p>ItemController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包装类型 绑定数组类型，可以使用两种方式，pojo的属性接收，和直接接收</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryVo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"queryItem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItem</span><span class="params">(QueryVo queryVo, Integer[] ids)</span> </span>&#123;</span><br><span class="line">System.out.println(queryVo.getItem().getId());</span><br><span class="line">System.out.println(queryVo.getItem().getName());</span><br><span class="line">System.out.println(queryVo.getIds().length);</span><br><span class="line">System.out.println(ids.length);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将表单的数据绑定到List"><a href="#将表单的数据绑定到List" class="headerlink" title="将表单的数据绑定到List"></a>将表单的数据绑定到List</h3><p>List中存放对象，并将定义的List放在包装类QueryVo中<br>使用包装pojo对象接收</p><p>jsp页面改造:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;itemList &#125;"</span> <span class="attr">var</span>=<span class="string">"item"</span> <span class="attr">varStatus</span>=<span class="string">"s"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ids"</span> <span class="attr">value</span>=<span class="string">"$&#123;item.id&#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"itemList[$&#123;s.index&#125;].id"</span> <span class="attr">value</span>=<span class="string">"$&#123;item.id &#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"itemList[$&#123;s.index&#125;].name"</span> <span class="attr">value</span>=<span class="string">"$&#123;item.name &#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"itemList[$&#123;s.index&#125;].price"</span> <span class="attr">value</span>=<span class="string">"$&#123;item.price &#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"itemList[$&#123;s.index&#125;].createtime"</span> <span class="attr">value</span>=<span class="string">"&lt;fmt:formatDate value="</span>$&#123;<span class="attr">item.createtime</span>&#125;" <span class="attr">pattern</span>=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>/&gt;</span>"/&gt;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"itemList[$&#123;s.index&#125;].detail"</span> <span class="attr">value</span>=<span class="string">"$&#123;item.detail &#125;"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/itemEdit.action?id=$&#123;item.id&#125;"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>${current}    当前这次迭代的（集合中的）项${status.first}    判断当前项是否为集合中的第一项，返回值为true或false${status.last}    判断当前项是否为集合中的最后一项varStatus属性常用参数总结下：${status.index}    输出行号，从0开始。${status.count}    输出行号，从1开始。${status.后一项，返回值为true或falsebegin、end、step分别表示：起始序号，结束序号，跳跃步伐。</code></pre><p><strong>注意</strong>：接收List类型的数据必须是pojo的属性，如果方法的形参为ArrayList类型无法正确接收到数据。</p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="SSM框架" scheme="http://ellisl.club/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM" scheme="http://ellisl.club/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC入门篇(1)</title>
    <link href="http://ellisl.club//posts/4780/"/>
    <id>http://ellisl.club//posts/4780/</id>
    <published>2018-05-16T07:28:31.000Z</published>
    <updated>2018-05-16T09:15:03.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC入门篇-一"><a href="#SpringMVC入门篇-一" class="headerlink" title="SpringMVC入门篇(一)"></a>SpringMVC入门篇(一)</h2><h3 id="Spring-MVC概述："><a href="#Spring-MVC概述：" class="headerlink" title="Spring MVC概述："></a>Spring MVC概述：</h3><p>Spring MVC是Spring提供的一个强大而灵活的web框架。借助于注解，Spring MVC提供了几乎是POJO的开发模式，使得控制器的开发和测试更加简单。这些控制器一般不直接处理请求，而是将其委托给Spring上下文中的其他bean，通过Spring的依赖注入功能，这些bean被注入到控制器中。</p><p>Spring MVC主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。他的两个核心是：</p><p><strong>处理器映射</strong>：选择使用哪个控制器来处理请求 </p><p><strong>视图解析器</strong>：选择结果应该如何渲染</p><p>通过以上两点，Spring MVC保证了如何选择控制处理请求和如何选择视图展现输出之间的松耦合。</p><a id="more"></a><h3 id="Spring的处理流程原理"><a href="#Spring的处理流程原理" class="headerlink" title="Spring的处理流程原理"></a>Spring的处理流程原理</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/SpringMVC架构.png" alt="Spring架构" title="">                </div>                <div class="image-caption">Spring架构</div>            </figure><h3 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h3><ol><li><p>用户发送请求至前端控制器DispatcherServlet</p></li><li><p>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p></li><li><p>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p></li><li><p>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器</p></li><li><p>执行处理器(Controller，也叫后端控制器)</p></li><li><p>Controller执行完成返回ModelAndView</p></li><li><p>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</p></li><li><p>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</p></li><li><p>ViewReslover解析后返回具体View</p></li><li><p>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</p></li><li><p>DispatcherServlet响应用户</p></li></ol><h2 id="SpringMVC组件说明"><a href="#SpringMVC组件说明" class="headerlink" title="SpringMVC组件说明"></a>SpringMVC组件说明</h2><h3 id="DispatcherServlet-前端控制器"><a href="#DispatcherServlet-前端控制器" class="headerlink" title="DispatcherServlet: 前端控制器"></a>DispatcherServlet: 前端控制器</h3><pre><code>用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。</code></pre><h3 id="HandlerMapping：处理器映射器"><a href="#HandlerMapping：处理器映射器" class="headerlink" title="HandlerMapping：处理器映射器"></a>HandlerMapping：处理器映射器</h3><pre><code>HandlerMapping负责根据用户请求url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，    例如：配置文件方式，实现接口方式，注解方式等。</code></pre><h3 id="HandlAdapter：处理器适配器"><a href="#HandlAdapter：处理器适配器" class="headerlink" title="HandlAdapter：处理器适配器"></a>HandlAdapter：处理器适配器</h3><pre><code>通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</code></pre><h3 id="ViewResolver：视图解析器"><a href="#ViewResolver：视图解析器" class="headerlink" title="ViewResolver：视图解析器"></a>ViewResolver：视图解析器</h3><pre><code>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。</code></pre><h3 id="Handler：处理器"><a href="#Handler：处理器" class="headerlink" title="Handler：处理器"></a>Handler：处理器</h3><pre><code>Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。</code></pre><h3 id="View：视图"><a href="#View：视图" class="headerlink" title="View：视图"></a>View：视图</h3><pre><code>springmvc框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是jsp。</code></pre><p>说明:</p><p>在springmvc的各个组件中，<strong>处理器映射器</strong>、<strong>处理器适配器</strong>、<strong>视图解析器</strong>称为springmvc的三大组件。</p><p>需要用户开发的组件有 <strong>handler</strong>、<strong>view</strong></p><h2 id="配置文件的配置"><a href="#配置文件的配置" class="headerlink" title="配置文件的配置"></a>配置文件的配置</h2><p>讲到配置文件,有三点需要配置:</p><h3 id="配置controller扫描包"><a href="#配置controller扫描包" class="headerlink" title="配置controller扫描包"></a>配置controller扫描包</h3><p>使用<a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>自动扫描标记@Controller的控制器类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置controller扫描包，多个包之间用,分隔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"club.ellisl.springmvc.controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解映射器和适配器"><a href="#注解映射器和适配器" class="headerlink" title="注解映射器和适配器"></a>注解映射器和适配器</h3><h4 id="配置处理器映射器"><a href="#配置处理器映射器" class="headerlink" title="配置处理器映射器"></a>配置处理器映射器</h4><p>注解式处理器映射器，对类中标记了@ResquestMapping的方法进行映射。<br>根据@ResquestMapping定义的url匹配@ResquestMapping标记的方法，<br>匹配成功返回HandlerMethod对象给前端控制器。</p><pre><code>从spring3.1版本开始，废除了DefaultAnnotationHandlerMapping的使用，推荐使用RequestMappingHandlerMapping完成注解式处理器映射。</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置处理器映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>@RequestMapping</strong>:定义请求url到处理器功能方法的映射</p><h4 id="配置处理器适配器"><a href="#配置处理器适配器" class="headerlink" title="配置处理器适配器"></a>配置处理器适配器</h4><p>注解式处理器适配器，对标记@ResquestMapping的方法进行适配。</p><pre><code>从spring3.1版本开始，废除了AnnotationMethodHandlerAdapter的使用，推荐使用RequestMappingHandlerAdapter完成注解式处理器适配</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置处理器适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解驱动"><a href="#注解驱动" class="headerlink" title="注解驱动"></a>注解驱动</h4><p>直接配置处理器映射器和处理器适配器比较麻烦，可以使用注解驱动来加载</p><p>可以在springmvc.xml配置文件中使用该注解替代注解处理器和适配器的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><p>视图解析器使用SpringMVC框架默认的InternalResourceViewResolver，这个视图解析器支持JSP视图解析</p><pre><code>在springmvc.xml配置文件中配置如下：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置逻辑视图的前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置逻辑视图的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>逻辑视图名需要在Controller中返回ModelAndView指定，</p></blockquote><blockquote><p>比如逻辑视图名为itemList，则最终返回的jsp视图地址:</p></blockquote><blockquote><p>WEB-INF/jsp/itemList.jsp</p></blockquote><p>最终jsp物理地址：<strong>前缀+逻辑视图名+后缀</strong></p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="SSM框架" scheme="http://ellisl.club/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM" scheme="http://ellisl.club/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis入门和配置</title>
    <link href="http://ellisl.club//posts/13919/"/>
    <id>http://ellisl.club//posts/13919/</id>
    <published>2018-05-15T11:50:48.000Z</published>
    <updated>2018-05-16T09:10:20.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mybatis介绍"><a href="#Mybatis介绍" class="headerlink" title="Mybatis介绍"></a>Mybatis介绍</h2><ul><li><p>MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码</p></li><li><p>Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回</p></li></ul><h2 id="Mybatis解决jdbc编程的问题"><a href="#Mybatis解决jdbc编程的问题" class="headerlink" title="Mybatis解决jdbc编程的问题"></a>Mybatis解决jdbc编程的问题</h2><a id="more"></a><ul><li>数据库连接创建、释放频繁造成系统资源浪费，从而影响系统性能。如果使用数据库连接池可解决此问题。</li></ul><blockquote><p>解决：在SqlMapConfig.xml中配置数据连接池，使用连接池管理数据库链接。</p></blockquote><ul><li>Sql语句在代码中硬编码，造成代码不易维护，实际应用中sql变化的可能较大，sql变动需要改变java代码。        </li></ul><blockquote><p>解决：将Sql语句配置在XXXmapper.xml文件中与java代码分离。</p></blockquote><ul><li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。</li></ul><blockquote><p>解决：Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型。</p></blockquote><ul><li>对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成pojo对象解析比较方便。</li></ul><blockquote><p>解决：Mybatis自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型。’</p></blockquote><h2 id="SqlMapConfig-xml"><a href="#SqlMapConfig-xml" class="headerlink" title="SqlMapConfig.xml"></a>SqlMapConfig.xml</h2><p>—–&gt; Mybatis核心配置文件配置</p><p>头文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mapper-xml"><a href="#Mapper-xml" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h2><p>—–&gt; sql映射文件的配置</p><p>头文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br></pre></td></tr></table></figure><p>映射配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- namespace：命名空间，用于隔离sql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id:statement的id 或者叫做sql的id--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- parameterType:声明输入参数的类型 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType:声明输出结果的类型，应该填写pojo的全路径 --&gt;</span></span><br><span class="line">!-- #&#123;&#125;：输入参数的占位符，相当于jdbc的？ --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"cn.itcast.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">SELECT * FROM `user` WHERE id  = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果传入的参数是简单数据类型，$&#123;&#125;里面必须写value --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByUsername2"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"cn.itcast.mybatis.pojo.User"</span>&gt;</span></span><br><span class="line">SELECT * FROM `user` WHERE username LIKE '%$&#123;value&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="和-的使用"><a href="#和-的使用" class="headerlink" title="${}和#{}的使用"></a>${}和#{}的使用</h3><ol><li><p>#{}表示一个占位符号，通过#{}可以实现preparedStatement向占位符中设置值,自动进行java类型和jdbc类型转换。#{}可以有效防止sql注入。#{}可以接收简单类型值或pojo属性值。 如果parameterType传输单个简单类型值，#{}括号中可以是value或其它名称。</p></li><li><p>${}表示拼接sql串，通过${}可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换， ${}可以接收简单类型值或pojo属性值，如果parameterType传输单个简单类型值，${}括号中只能是value。值得注意的是 该方式不能有效的防止sql注入</p></li></ol><h3 id="parameterType和resultType"><a href="#parameterType和resultType" class="headerlink" title="parameterType和resultType"></a>parameterType和resultType</h3><ol><li><p>parameterType：指定输入参数类型，mybatis通过ognl从输入对象中获取参数值拼接在sql中。</p></li><li><p>resultType：指定输出结果类型，mybatis将sql查询结果的一行记录数据映射为resultType指定类型的对象。如果有多条数据，则分别进行映射，并把对象放到容器List中</p></li></ol><h3 id="selectOne和selectList"><a href="#selectOne和selectList" class="headerlink" title="selectOne和selectList"></a>selectOne和selectList</h3><ol><li>selectOne查询一条记录，如果使用selectOne查询多条记录则抛出异常</li></ol><blockquote><p>org.apache.ibatis.exceptions.TooManyResultsException</p></blockquote><ol><li>selectList可以查询一条或多条记录。</li></ol><h2 id="Mysql自增主键返回"><a href="#Mysql自增主键返回" class="headerlink" title="Mysql自增主键返回"></a>Mysql自增主键返回</h2><ul><li>在新增记录的时候在sql语句之前配置主键自增</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- order：设置在执行insert语句前执行查询id的sql，还指在执行insert语句之后执行查询id的sql --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType：设置返回的id的类型 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>uuid实现主键</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">resultType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SqlSession的使用范围"><a href="#SqlSession的使用范围" class="headerlink" title="SqlSession的使用范围"></a>SqlSession的使用范围</h2><p>了解SqlSession的使用范围,首先要明白他是怎么创建的</p><pre><code>SqlSession中封装了对数据库的操作，如：查询、插入、更新、删除等。SqlSession通过SqlSessionFactory创建。SqlSessionFactory是通过SqlSessionFactoryBuilder进行创建。</code></pre><p>1.SqlSessionFactoryBuilder</p><pre><code>SqlSessionFactoryBuilder用于创建SqlSessionFacoty，SqlSessionFacoty一旦创建完成就不需要SqlSessionFactoryBuilder了，因为SqlSession是通过SqlSessionFactory创建的。所以可以将SqlSessionFactoryBuilder当成一个工具类使用，最佳使用范围是方法范围即方法体内局部变量。</code></pre><p>2.SqlSessionFactory</p><pre><code>SqlSessionFactory是一个接口，接口中定义了openSession的不同重载方法，SqlSessionFactory的最佳使用范围是整个应用运行期间，一旦创建后可以重复使用，通常以单例模式管理SqlSessionFactory。</code></pre><p>3.SqlSession</p><pre><code>SqlSession是一个面向用户的接口，sqlSession中定义了数据库操作方法。每个线程都应该有它自己的SqlSession实例。SqlSession的实例不能共享使用，它也是线程不安全的。因此最佳的范围是请求或方法范围。绝对不能将SqlSession实例的引用放在一个类的静态字段或实例字段中。打开一个 SqlSession；使用完毕就要关闭它。</code></pre><h2 id="Mapper动态代理方式"><a href="#Mapper动态代理方式" class="headerlink" title="Mapper动态代理方式"></a>Mapper动态代理方式</h2><pre><code>Mapper接口开发方法只需要程序员编写Mapper接口（相当于Dao接口），由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。</code></pre><h3 id="Mapper接口开发需要遵循以下规范："><a href="#Mapper接口开发需要遵循以下规范：" class="headerlink" title="Mapper接口开发需要遵循以下规范："></a>Mapper接口开发需要遵循以下规范：</h3><pre><code>Mapper.xml文件中的namespace与mapper接口的类路径相同。Mapper接口方法名和Mapper.xml中定义的每个statement的id相同 Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</code></pre><h3 id="Mapper-xml-映射文件-的配置"><a href="#Mapper-xml-映射文件-的配置" class="headerlink" title="Mapper.xml(映射文件)的配置"></a>Mapper.xml(映射文件)的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Mapper接口类路径"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"Mapper接口方法名"</span> <span class="attr">parameterType</span>=<span class="string">"接口方法参数类型"</span> <span class="attr">resultType</span>=<span class="string">"接口方法返回值类型"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意:要在Mabits核心配置文件中配置加载映射文件(Mapper.xml)</p><h2 id="SqlMapConfig-xml配置文件的其他配置"><a href="#SqlMapConfig-xml配置文件的其他配置" class="headerlink" title="SqlMapConfig.xml配置文件的其他配置"></a>SqlMapConfig.xml配置文件的其他配置</h2><h3 id="properties（属性）"><a href="#properties（属性）" class="headerlink" title="properties（属性）"></a>properties（属性）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用resource属性加载外部配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在properties内部用property定义属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果外部配置文件有该属性，则内部定义属性被外部属性覆盖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.username"</span> <span class="attr">value</span>=<span class="string">"root123"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbc.password"</span> <span class="attr">value</span>=<span class="string">"root123"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="typeAliases（类型别名）"><a href="#typeAliases（类型别名）" class="headerlink" title="typeAliases（类型别名）"></a>typeAliases（类型别名）</h3><p>在Mybatis中有一些默认的别名,例如返回值类型的配置的时候,直接写类型名即可,不需要写类型的全限定名,这就是因为在Mybatis中已经配置好了一些默认的类型别名,直接使用即可,除此之外,还可以自定义类型别名:</p><p>在SqlMapConfig.xml中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单个别名定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"User类的全限定名"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（大小写不敏感） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"包扫描路径"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"其它包"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是,别名的大小写不敏感</p><h3 id="mappers（映射器）"><a href="#mappers（映射器）" class="headerlink" title="mappers（映射器）"></a>mappers（映射器）</h3><p>Mapper配置的几种方法：</p><p>方式一:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">" "</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用相对于类路径的资源--&gt;</span></span><br></pre></td></tr></table></figure><p>方式二:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">" "</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用mapper接口类路径--&gt;</span></span><br></pre></td></tr></table></figure><p>方式三:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册指定包下的所有mapper接口--&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意:<br>    使用方法二三时,要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中</p><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><p>通过mybatis提供的各种标签方法实现动态拼接sql</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h4><p>需求是:根据姓名和性别查询用户,有可能是姓名性别都没选中,有可能只有一个姓名或只有一个性别,或两个条件都有</p><h3 id="if标签的使用"><a href="#if标签的使用" class="headerlink" title="if标签的使用"></a>if标签的使用</h3><p>通过使用if标签可以实现判断各种查询情景</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByWhere"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">SELECT id, username, birthday, sex, address FROM `user`</span><br><span class="line">WHERE 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null and sex != ''"</span>&gt;</span></span><br><span class="line">AND sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line">AND username LIKE '%$&#123;username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="where标签的使用"><a href="#where标签的使用" class="headerlink" title="where标签的使用"></a>where标签的使用</h3><p>通过where标签可以对上面代码进行改造,将不用再写where和1=1的条件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByWhere"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">SELECT id, username, birthday, sex, address FROM `user`</span><br><span class="line"><span class="comment">&lt;!-- where标签可以自动添加where，同时处理sql语句中第一个and关键字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null"</span>&gt;</span></span><br><span class="line">AND sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line">AND username LIKE '%$&#123;username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><p>通过sql标签可以实现将重复性的条件提取出来直接在sql中引入即可(include)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明sql片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userFields"</span>&gt;</span></span><br><span class="line">id, username, birthday, sex, address</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userFields"</span> /&gt;</span> FROM `user`</span><br></pre></td></tr></table></figure><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByIds"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">SELECT * FROM `user`</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- foreach标签，进行遍历 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- collection：遍历的集合，这里是QueryVo的ids属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item：遍历的项目，可以随便写，，但是和后面的#&#123;&#125;里面要一致 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- open：在前面添加的sql片段 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- close：在结尾处添加的sql片段 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- separator：指定遍历的元素之间使用的分隔符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"id IN ("</span> <span class="attr">close</span>=<span class="string">")"</span></span></span><br><span class="line"><span class="tag"><span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;item&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询:"></a>关联查询:</h2><h3 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询:"></a>一对一查询:</h3><p>需求：查询所有订单信息，关联查询下单用户信息</p><p>方式一:    使用resultType</p><p>改造订单pojo类，此pojo类中包括了订单信息和用户信息<br>这样返回对象的时候，mybatis自动把用户信息也注入进来了</p><p>方式二:使用resultMap</p><p>定义专门的resultMap用于映射一对一查询结果。</p><h4 id="Mapper-xml配置如下"><a href="#Mapper-xml配置如下" class="headerlink" title="Mapper.xml配置如下:"></a>Mapper.xml配置如下:</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"order"</span> <span class="attr">id</span>=<span class="string">"orderUserResultMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"number"</span> <span class="attr">column</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createtime"</span> <span class="attr">column</span>=<span class="string">"createtime"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"note"</span> <span class="attr">column</span>=<span class="string">"note"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- association ：配置一对一属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- property:order里面的User属性名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- javaType:属性类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id:声明主键，表示user_id是关联查询对象的唯一标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询:"></a>一对多查询:</h3><p>需求:查询所有用户信息及用户关联的订单信息</p><h4 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法:"></a>查询方法:</h4><p>第一步,实体类中配置一对多关系属性</p><p>第二步,编写Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userOrderResultMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一对多的关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orders"</span> <span class="attr">javaType</span>=<span class="string">"list"</span> <span class="attr">ofType</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置主键，是关联Order的唯一标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"number"</span> <span class="attr">column</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createtime"</span> <span class="attr">column</span>=<span class="string">"createtime"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"note"</span> <span class="attr">column</span>=<span class="string">"note"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserOrder"</span> <span class="attr">resultMap</span>=<span class="string">"userOrderResultMap"</span>&gt;</span></span><br><span class="line">SELECT * FROM `user` u LEFT JOIN `order` o ON u.id = o.user_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步,在UserMapper接口中定义查询方法</p><p>第四步,测试</p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="SSM框架" scheme="http://ellisl.club/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM" scheme="http://ellisl.club/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate知识小结</title>
    <link href="http://ellisl.club//posts/25673/"/>
    <id>http://ellisl.club//posts/25673/</id>
    <published>2018-04-28T05:25:41.000Z</published>
    <updated>2018-05-16T09:09:57.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate-小结"><a href="#Hibernate-小结" class="headerlink" title="Hibernate 小结"></a>Hibernate 小结</h2><h3 id="Hibernate简介"><a href="#Hibernate简介" class="headerlink" title="Hibernate简介:"></a>Hibernate简介:</h3><p>Hibernate是一个开放源码的对象关系映射框架,他对JDBC进行了轻量级的对象封装它将实体类和数据库建立映射关系,是一个全自动的ORM框架,是java持久层框架之一</p><h3 id="Hibernate的优势"><a href="#Hibernate的优势" class="headerlink" title="Hibernate的优势:"></a>Hibernate的优势:</h3><p>1.对JDBC进行了轻量级的对象封装,简化了DAO层繁琐的重复性代码,减少了内存消耗,加快了运行效率</p><p>2.Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现，简化了DAO层编码工作</p><a id="more"></a><p>3.Hibernate支持很多关系型数据库</p><p>4.开放源码,可扩展性强</p><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM:"></a>ORM:</h3><p>对象关系映射:就是实体类和数据库表建立对应关系</p><p>通过Hibernate映射文件和Hibernate的核心配置文件实现</p><p>操作对象就相当于操作数据库表</p><p>执行原理:</p><p>1.get()在程序运行期间利用反射技术动态创建对象</p><p>2.根据hbm配置文件调用set方法进行绑定一一映射</p><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类:"></a>实体类:</h3><p>1.实现序列化接口</p><p>2.私有化成员变量</p><p>3.提供无参构造(Hibernate反射创建对象用)</p><p>4.提供set/get方法</p><h3 id="持久态对象的三种状态"><a href="#持久态对象的三种状态" class="headerlink" title="持久态对象的三种状态:"></a>持久态对象的三种状态:</h3><p>1.瞬时态:不存在持久化标识OID 尚未与Hibernate Session关联对象,数据库中没有相应记录</p><p>2.持久态:存在持久化标识OID,与当前session有关联,并且关联的session没有关闭,数据库中有相应记录</p><p>3.托管态:存在持久化标识OID,与当前session没有关联,在数据库中有相应记录</p><h3 id="Hibernate的一级缓存和二级缓存"><a href="#Hibernate的一级缓存和二级缓存" class="headerlink" title="Hibernate的一级缓存和二级缓存"></a>Hibernate的一级缓存和二级缓存</h3><p>Hibernate向一级缓存存放数据时(保存在session中),同时保存快照数据(快照数据不可操作),当修改一级缓存中的数据进行flush操作时,会将session的数据和快照中的数据进行对比,若不一致,则会将session一级缓存中的数据更新到数据库中,同时更新快照区</p><h3 id="get和load的区别"><a href="#get和load的区别" class="headerlink" title="get和load的区别:"></a>get和load的区别:</h3><p>get如果没有找到会返回null,load如果没有找到会抛出异常</p><p>get会先查一级缓存,再查二级缓存,然后再查数据库</p><p>load会先查一级缓存,如果没找到就创建代理对象,等需要的时候去查询二级缓存和数据库(延迟加载)</p><h3 id="SessionFactory"><a href="#SessionFactory" class="headerlink" title="SessionFactory:"></a>SessionFactory:</h3><p>SessionFactory是一个用于创建Session对象的工厂,是线程安全的,所以多个线程可以同时使用一个</p><p>SessionFactory.同时它里面还包含着对象关系映射有关的所以元数据,他是不可变的,一旦创建好就<br>不能进行修改</p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="SSH框架" scheme="http://ellisl.club/categories/SSH%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="ssh" scheme="http://ellisl.club/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>从前慢</title>
    <link href="http://ellisl.club//posts/24768/"/>
    <id>http://ellisl.club//posts/24768/</id>
    <published>2018-04-28T05:06:24.000Z</published>
    <updated>2018-05-04T10:10:11.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从前慢"><a href="#从前慢" class="headerlink" title="从前慢"></a>从前慢</h2><p> <br></p><p> </p><p align="center">记得早先少年时 </p><p> </p><p align="center">大家诚诚恳恳 </p><p> </p><p align="center">说一句 是一句 </p><p> </p><p align="center">清早上火车站 </p><p> </p><p align="center">长街黑暗无行人 </p><p> </p><p align="center">卖豆浆的小店冒着热气 </p><a id="more"></a><p> </p><p align="center">从前的日色变得慢 </p><p> </p><p align="center">车，马，邮件都慢 </p><p> </p><p align="center">一生只够爱一个人 </p><p> </p><p align="center">从前的锁也好看 </p><p> </p><p align="center">钥匙精美有样子 </p><p> </p><p align="center">你锁了 人家就懂了—木心 </p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="诗歌" scheme="http://ellisl.club/categories/%E8%AF%97%E6%AD%8C/"/>
    
    
      <category term="poem" scheme="http://ellisl.club/tags/poem/"/>
    
  </entry>
  
</feed>
